quarkus.resteasy.path=/api

#quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/crud;DB_CLOSE_ON_EXIT=FALSE;AUTO_RECONNECT=TRUE

# datasource configuration
quarkus.datasource.db-kind = postgresql
quarkus.datasource.username = postgres
quarkus.datasource.password = senha
quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/crud

# drop and create the database at startup (use `update` to only update the schema)
#quarkus.hibernate-orm.database.generation=drop-and-create
quarkus.hibernate-orm.database.generation=update
#quarkus.datasource.db-kind=h2
#quarkus.datasource.username=hibernate
#quarkus.datasource.password=hibernate
#quarkus.datasource.jdbc.url=jdbc:h2::file:../../../databaseteste;DB_CLOSE_ON_EXIT=FALSE;AUTO_RECONNECT=TRUE
#quarkus.hibernate-orm.dialect=org.hibernate.dialect.H2Dialect
#quarkus.hibernate-orm.database.generation=drop-and-create
quarkus.hibernate-orm.sql-load-script=banco_de_dados_inicia.sql
quarkus.hibernate-orm.log.sql=true

quarkus.http.cors=true
quarkus.http.cors.origins=*
quarkus.http.cors.headers=accept, authorization, content-type, x-requested-with
quarkus.http.cors.methods=GET, POST, PUT, DELETE, OPTIONS


#Configuração do JEAGER
quarkus.jaeger.service-name=desafioapi
quarkus.jaeger.sampler-type=const
quarkus.jaeger.sampler-param=1
quarkus.jaeger.endpoint=http://localhost:14268/api/traces
quarkus.log.console.format=%d{HH:mm:ss} %-5p traceId=%X{traceId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n
